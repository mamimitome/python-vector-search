# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e7xbNa9p5DqZiGvcrLaEVjBN3nR817J4
"""

# OpenAI埋め込みモデルを使った簡易検索システム

# 質問文と複数の文章（ドキュメント）をベクトル化して
# 類似度（コサイン類似度）を計算し、
# 最も関連性の高い文章を使って回答を生成します。

from openai import OpenAI
import numpy as np
import os
from sklearn.metrics.pairwise import cosine_similarity
from google.colab import userdata

#Google Colabの「ユーザーデータ」機能からAPIキーを取得
os.environ["OPENAI_API_KEY"] = userdata.get("OPENAI_API_KEY")

# OpenAIクライアントを初期化
client = OpenAI()

# テキストをベクトル化する関数

def vectorize_text(text):
    """
    与えられたテキストをOpenAIの埋め込みモデルで数値ベクトルに変換します。
    """
    response = client.embeddings.create(
        input=text,
        model="text-embedding-3-small"  # 軽量＆安価な埋め込みモデル
    )
    return response.data[0].embedding

#  質問と検索対象の文章

question = "2023第一事業部の売り上げはどれくらい？"

documents = [
    "2023上期売り上げ200億円,下期売り上げ300億円",
    "2023年第一事業部売り上げ300億円,第二事業部売り上げ300億円,第三事業部売り上げ300億円",
    "2024年は全社で10000億円の売り上げを目指す"
]

# ベクトル化（数値化）

vectors = [vectorize_text(doc) for doc in documents]
question_vector = vectorize_text(question)

# コサイン類似度の計算
# 類似度が高いほど、質問に関係が深い。
similarities = []
for i, vector in enumerate(vectors):
    similarity = cosine_similarity([question_vector], [vector])[0][0]
    similarities.append(similarity)
    print(f"Document {i+1}: {documents[i]} → 類似度: {similarity:.4f}")

#  最も類似度の高いドキュメントを選ぶ

most_similar_index = int(np.argmax(similarities))
most_similar_doc = documents[most_similar_index]

print("最も関連性が高い情報:")
print(most_similar_doc)

#  選ばれた情報を元にGPTで回答を生成

prompt = f"""
以下の質問に、次の情報を参考にして答えてください。

[質問]
{question}

[参考情報]
{most_similar_doc}
"""

response = client.completions.create(
    model="gpt-3.5-turbo-instruct",
    prompt=prompt,
    max_tokens=200
)



# GPTの回答を表示

print("回答:")
print(response.choices[0].text.strip())